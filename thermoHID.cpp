#include <USBComposite.h>
#include "MapleFreeRTOS1000.h"
#include "MapleFreeRTOS1000_pp.h"
#include "HidSensorSpec.h"
#define TXSIZE 256
#define RXSIZE 300

#define ALIGNMENT(x) __attribute__ ((aligned (x)))
 ALIGNMENT(4) const uint8_t reportDescription[] = {

        HID_USAGE_PAGE_SENSOR,
        HID_USAGE_SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE,
        
        HID_COLLECTION(Physical),
            //feature reports (xmit/receive)
            HID_USAGE_PAGE_SENSOR,

            HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL,
            HID_LOGICAL_MIN_8(0),
            HID_LOGICAL_MAX_8(2),
            HID_REPORT_SIZE(32), // 1*32 bits
            HID_REPORT_COUNT(1),
            HID_UNIT_EXPONENT(0),
            HID_FEATURE(Data_Var_Abs),

            HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_ENVIRONMENTAL_TEMPERATURE,HID_USAGE_SENSOR_DATA_MOD_MAX),
            HID_LOGICAL_MIN_16(0x01,0x80), // LOGICAL_MINIMUM (-32767)
            HID_LOGICAL_MAX_16(0xFF,0x7F), // LOGICAL_MAXIMUM (32767)
            HID_REPORT_SIZE(16), // 1* 16 bits
            HID_REPORT_COUNT(1),
            HID_UNIT_EXPONENT(0x0E), // scale default unit Celsius to provide 2 digits past the decimal point
            HID_FEATURE(Data_Var_Abs),

            HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_ENVIRONMENTAL_TEMPERATURE,HID_USAGE_SENSOR_DATA_MOD_MIN),
            HID_LOGICAL_MIN_16(0x01,0x80), // LOGICAL_MINIMUM (-32767)
            HID_LOGICAL_MAX_16(0xFF,0x7F), // LOGICAL_MAXIMUM (32767)
            HID_REPORT_SIZE(16),
            HID_REPORT_COUNT(1), // 1*16 bits
            HID_UNIT_EXPONENT(0x0E), // scale default unit Celsius to provide 2 digits past the decimal point
            HID_FEATURE(Data_Var_Abs),


            //input reports (transmit)
            HID_USAGE_PAGE_SENSOR,

            HID_USAGE_SENSOR_STATE,
            HID_LOGICAL_MIN_8(0),
            HID_LOGICAL_MAX_8(6),
            HID_REPORT_SIZE(8), // 1*8bits
            HID_REPORT_COUNT(1),
                HID_COLLECTION(Logical),
                HID_USAGE_SENSOR_STATE_UNKNOWN,
                HID_USAGE_SENSOR_STATE_READY,
                HID_USAGE_SENSOR_STATE_NOT_AVAILABLE,
                HID_USAGE_SENSOR_STATE_NO_DATA,
                HID_USAGE_SENSOR_STATE_INITIALIZING,
                HID_USAGE_SENSOR_STATE_ACCESS_DENIED,
                HID_USAGE_SENSOR_STATE_ERROR,
                HID_INPUT(Data_Arr_Abs),
            HID_END_COLLECTION,

            HID_USAGE_SENSOR_EVENT,
            HID_LOGICAL_MIN_8(0),
            HID_LOGICAL_MAX_8(16), // 1 * 8 bits
            HID_REPORT_SIZE(8),
            HID_REPORT_COUNT(1),
            HID_COLLECTION(Logical),
                HID_USAGE_SENSOR_EVENT_UNKNOWN,
                HID_USAGE_SENSOR_EVENT_STATE_CHANGED,
                HID_USAGE_SENSOR_EVENT_PROPERTY_CHANGED,
                HID_USAGE_SENSOR_EVENT_DATA_UPDATED,
                HID_USAGE_SENSOR_EVENT_POLL_RESPONSE,
                HID_USAGE_SENSOR_EVENT_CHANGE_SENSITIVITY,
                HID_USAGE_SENSOR_EVENT_MAX_REACHED,
                HID_USAGE_SENSOR_EVENT_MIN_REACHED,
                HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_UPWARD,
                HID_USAGE_SENSOR_EVENT_HIGH_THRESHOLD_CROSS_DOWNWARD,
                HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_UPWARD,
                HID_USAGE_SENSOR_EVENT_LOW_THRESHOLD_CROSS_DOWNWARD,
                HID_USAGE_SENSOR_EVENT_ZERO_THRESHOLD_CROSS_UPWARD,
                HID_USAGE_SENSOR_EVENT_ZERO_THRESHOLD_CROSS_DOWNWARD,
                HID_USAGE_SENSOR_EVENT_PERIOD_EXCEEDED,
                HID_USAGE_SENSOR_EVENT_FREQUENCY_EXCEEDED,
                HID_USAGE_SENSOR_EVENT_COMPLEX_TRIGGER,
                HID_INPUT(Data_Arr_Abs),
            HID_END_COLLECTION,
            HID_USAGE_SENSOR_DATA_ENVIRONMENTAL_TEMPERATURE,
            HID_LOGICAL_MIN_16(0x01,0x80), // LOGICAL_MINIMUM (-32767)
            HID_LOGICAL_MAX_16(0xFF,0x7F), // LOGICAL_MAXIMUM (32767)
            HID_REPORT_SIZE(16),  // 1* 16 bits
            HID_REPORT_COUNT(1),
            HID_UNIT_EXPONENT(0x0E), // scale default unit Celsius to provide 2 digits past the decimal point
            HID_INPUT(Data_Var_Abs),
        HID_END_COLLECTION

} ;

 /**
  */
 class TemperatureReport : public HIDReporter
 {
 public:
        TemperatureReport(USBHID &parent,uint8_t reportID) : HIDReporter(HID, (uint8_t*)&temperature, sizeof(temperature), reportID) 
        {
        }
protected:
        uint32_t temperature;
 };
 
/**
 */
class TemperatureSensorHID : public USBHID
{
protected:   
   
    
    public:
            TemperatureSensorHID()
            {
            }
            void begin()
            {
                 USBHID::begin(reportDescription, sizeof(reportDescription));  
            }
                
    
};

// Derived from https://github.com/majbthrd/HIDsensor.git

static void HidTask(void *a);

void startUSBHID()
{
     xTaskCreate( HidTask, "HidTask", 250, NULL, 13, NULL );   
}

void HidTask(void *a)
{
    TemperatureSensorHID *sensorHid=new TemperatureSensorHID;
    TemperatureReport *report=new TemperatureReport(*sensorHid,0x6);
    sensorHid->begin();
    while(1)
    {
        xDelay(1000);
    }
    
}
#if 0
HID_USAGE_PAGE_SENSOR,
    HID_USAGE_SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE,
    HID_COLLECTION(Physical),
 
    //feature reports (xmit/receive)
    HID_USAGE_PAGE_SENSOR,
    // Sensor Connection Type - RO
    HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE,  
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(2),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_INTEGRATED_SEL,
        HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_ATTACHED_SEL_SEL,
        HID_USAGE_SENSOR_PROPERTY_CONNECTION_TYPE_PC_EXTERNAL_SEL_SEL,
        HID_FEATURE(Data_Arr_Abs),
        HID_END_COLLECTION,
   // Reporting State - RW
    HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE,
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(5),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS_SEL_SEL,
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_SEL_SEL,
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_THRESHOLD_EVENTS_SEL_SEL,
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS_SEL_WAKE_SEL,
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_SEL_WAKE_SEL,
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_THRESHOLD_EVENTS_WAKE_SEL_SEL,
        HID_FEATURE(Data_Arr_Abs),
        HID_END_COLLECTION,
    // Power State - RW
    HID_USAGE_SENSOR_PROPERTY_POWER_STATE,
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(5),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_UNDEFINED_SEL,          
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D0_FULL_POWER_SEL,      
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D1_LOW_POWER_SEL,       
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D2_STANDBY_WITH_WAKE_SEL,
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D3_SLEEP_WITH_WAKE_SEL, 
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D4_POWER_OFF_SEL,       
        HID_FEATURE(Data_Arr_Abs),
        HID_END_COLLECTION,
    // Sensor State - RW
    HID_USAGE_SENSOR_STATE,
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(6),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_STATE_UNKNOWN_SEL_SEL,
        HID_USAGE_SENSOR_STATE_READY_SEL_SEL,
        HID_USAGE_SENSOR_STATE_NOT_AVAILABLE_SEL_SEL,
        HID_USAGE_SENSOR_STATE_NO_DATA_SEL_SEL,
        HID_USAGE_SENSOR_STATE_INITIALIZING_SEL_SEL,
        HID_USAGE_SENSOR_STATE_ACCESS_DENIED_SEL_SEL,
        HID_USAGE_SENSOR_STATE_ERROR_SEL_SEL,
        HID_FEATURE(Data_Arr_Abs),
        HID_END_COLLECTION,
    // Report Interval - RW
    HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL,
    HID_LOGICAL_MIN_32(0x00,0x00,0x00,0x00),
    HID_LOGICAL_MAX_32(0xFF,0xFF,0xFF,0xFF),
    HID_REPORT_SIZE(32),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0),
    HID_FEATURE(Data_Var_Abs),
    // Minimum Report Interval  -  RO
    HID_USAGE_SENSOR_PROPERTY_MINIMUM_REPORT_INTERVAL,  
    HID_LOGICAL_MIN_32(0x00,0x00,0x00,0x00),
    HID_LOGICAL_MAX_32(0xFF,0xFF,0xFF,0xFF),
    HID_REPORT_SIZE(32),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0),
    HID_FEATURE(Data_Var_Abs),
    // Sensor Accuracy - RO
    HID_USAGE_SENSOR_PROPERTY_ACCURACY,
    HID_LOGICAL_MIN_8(0x00),  //0   
    HID_LOGICAL_MAX_8(0xFF),  //255   
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x0E), // x0.01
    HID_FEATURE(Data_Var_Abs),
    // Sensor Resolution - RO
    HID_USAGE_SENSOR_PROPERTY_RESOLUTION,
    HID_LOGICAL_MIN_8(0x00),      // 0
    HID_LOGICAL_MAX_16(0xFF,0xFF),// 65535
    HID_REPORT_SIZE(16),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x0C), // x0.0001
    HID_FEATURE(Data_Var_Abs),
    // Range Maximum - RO
    HID_USAGE_SENSOR_PROPERTY_RANGE_MAXIMUM,
    HID_LOGICAL_MIN_8(0x00),  //0
    HID_LOGICAL_MAX_8(0xFF),  //255
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x00), // x1
    HID_FEATURE(Data_Var_Abs),
    // Range Minimum - RO
    HID_USAGE_SENSOR_PROPERTY_RANGE_MINIMUM,
    HID_LOGICAL_MIN_8(0x81), //-127
    HID_LOGICAL_MAX_8(0xFF), // 127
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x00), // x1
    HID_FEATURE(Data_Var_Abs),
    // Change Sensitivity Absolute - RW
    HID_USAGE_SENSOR_PROPERTY_CHANGE_SENSITIVITY_ABS,
    HID_LOGICAL_MIN_8(0x00),  //0
    HID_LOGICAL_MAX_16(0xFF,0xFF),// 65535
    HID_REPORT_SIZE(16),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x0D), // x0.001
    HID_FEATURE(Data_Var_Abs),
 
    //input reports (transmit)
    HID_USAGE_PAGE_SENSOR,
    // Sensor state
    HID_USAGE_SENSOR_STATE,
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(6),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_STATE_UNKNOWN_SEL_SEL,
        HID_USAGE_SENSOR_STATE_READY_SEL_SEL,
        HID_USAGE_SENSOR_STATE_NOT_AVAILABLE_SEL_SEL,
        HID_USAGE_SENSOR_STATE_NO_DATA_SEL_SEL,
        HID_USAGE_SENSOR_STATE_INITIALIZING_SEL_SEL,
        HID_USAGE_SENSOR_STATE_ACCESS_DENIED_SEL_SEL,
        HID_USAGE_SENSOR_STATE_ERROR_SEL_SEL,
        HID_INPUT(Data_Arr_Abs),
        HID_END_COLLECTION,
    // Sensor Events 
    HID_USAGE_SENSOR_EVENT,
    HID_LOGICAL_MIN_8(0),
    HID_LOGICAL_MAX_8(16),
    HID_REPORT_SIZE(8),
    HID_REPORT_COUNT(1),
    HID_COLLECTION(Logical),
        HID_USAGE_SENSOR_EVENT_UNKNOWN_SEL_SEL,
        HID_USAGE_SENSOR_EVENT_STATE_CHANGED_SEL_SEL,
        HID_USAGE_SENSOR_EVENT_PROPERTY_CHANGED_SEL_SEL,
        HID_USAGE_SENSOR_EVENT_DATA_UPDATED_SEL_SEL,
        HID_USAGE_SENSOR_EVENT_POLL_RESPONSE_SEL_SEL,
        HID_USAGE_SENSOR_EVENT_CHANGE_SENSITIVITY_SEL_SEL,
        HID_INPUT(Data_Arr_Abs),
        HID_END_COLLECTION,
    // Temperature data.
    HID_USAGE_SENSOR_DATA_ENVIRONMENTAL_TEMPERATURE,
    HID_LOGICAL_MIN_16(0x01,0x80), //    LOGICAL_MINIMUM (-32767)
    HID_LOGICAL_MAX_16(0xFF,0x7F), //    LOGICAL_MAXIMUM (32767)
    HID_REPORT_SIZE(16),
    HID_REPORT_COUNT(1),
    HID_UNIT_EXPONENT(0x0E), // x0.01
    HID_INPUT(Data_Var_Abs),
 
    HID_END_COLLECTION
 
};
#endif